<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo Blog</title>
    <url>/2020/11/08/Hexo-Blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p><strong><em>Blog FrameWork</em></strong></p>
<p><code>阿里云ECS</code></p>
<p><code>域名</code></p>
<p><code>腾讯云COS</code></p>
<p><code>Centos7</code></p>
<p><code>Nginx</code></p>
<p><code>Git</code></p>
<p><code>Node.js</code></p>
<p><code>Hexo+Ayer</code></p>
</blockquote>
<h2 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<h3 id="创建git账户"><a href="#创建git账户" class="headerlink" title="创建git账户"></a>创建git账户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure>

<h3 id="添加账户权限"><a href="#添加账户权限" class="headerlink" title="添加账户权限"></a>添加账户权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment"># 找到</span></span><br><span class="line">root	ALL=(ALL)	ALL</span><br><span class="line"><span class="comment"># 在下方添加</span></span><br><span class="line">git		ALL=(ALL)	ALL</span><br><span class="line"><span class="comment"># 保存退出	:wq</span></span><br><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure>

<h3 id="设置git账户密码"><a href="#设置git账户密码" class="headerlink" title="设置git账户密码"></a>设置git账户密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>

<h3 id="切换git用户"><a href="#切换git用户" class="headerlink" title="切换git用户"></a>切换git用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line"><span class="comment"># 创建 .ssh 文件夹</span></span><br><span class="line">mkdir ~/.ssh</span><br><span class="line"><span class="comment"># 创建 authorized_keys</span></span><br><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line"><span class="comment"># 将本地公钥 id_rsa.pub 内容复制到 authorized_keys</span></span><br><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure>

<h3 id="本地终端测试"><a href="#本地终端测试" class="headerlink" title="本地终端测试"></a>本地终端测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -v git@server</span><br></pre></td></tr></table></figure>

<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 repo 作为 git 目录</span></span><br><span class="line">mkdir /var/repo</span><br><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br><span class="line"><span class="comment"># hexo 作为网站根目录</span></span><br><span class="line">mkdir /var/www/hexo</span><br><span class="line">chown -R git:git /var/www/hexo</span><br><span class="line">chmod -R 755 /var/www/hexo</span><br><span class="line"><span class="comment"># 创建一个 git 仓库</span></span><br><span class="line"><span class="built_in">cd</span> /var/repo</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure>

<h3 id="创建一个新的git钩子，用于自动部署"><a href="#创建一个新的git钩子，用于自动部署" class="headerlink" title="创建一个新的git钩子，用于自动部署"></a>创建一个新的git钩子，用于自动部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /var/repo/blog.git/hooks/post-receive</span><br><span class="line"><span class="comment"># 添加内容</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout -f</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line">chown -R git:git /var/repo/blog.git/hooks/post-receive</span><br><span class="line">chmod +x /var/repo/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<h3 id="本地hexo搭建"><a href="#本地hexo搭建" class="headerlink" title="本地hexo搭建"></a>本地hexo搭建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">npm install hexo server</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改__config.yml文件"></a>修改__config.yml文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到deploy</span></span><br><span class="line">deploy:</span><br><span class="line">	<span class="built_in">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">	repo: <span class="string">&#x27;git@server:/var/repo/blog.git&#x27;</span></span><br><span class="line">	branch: <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="安装ayer主题"><a href="#安装ayer主题" class="headerlink" title="安装ayer主题"></a>安装ayer主题</h3><p><a href="https://shen-yu.gitee.io/2019/ayer/">Ayer中文文档</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-theme-ayer -S</span><br><span class="line">vim _config.yml</span><br><span class="line">​```</span><br><span class="line">theme: ayer</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>

<h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># conf.d 下新建 blog.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen  443     ssl;</span><br><span class="line">        server_name     *.域名 域名;</span><br><span class="line">        root    /var/www/blog;</span><br><span class="line">        index   index.html;</span><br><span class="line">        ssl_certificate cert/证书.pem; <span class="comment"># nginx 目录下新建 cert 文件夹，存放证书和秘钥</span></span><br><span class="line">        ssl_certificate_key cert/秘钥.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">                index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name     *.域名 域名;</span><br><span class="line">        rewrite ^(.*)$ https://<span class="variable">$host</span><span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+ElasticSearch</title>
    <url>/2020/11/08/SpringBoot-ElasticSearch/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p><strong><em>Framework</em></strong></p>
<p><code>SpringBoot 2.3.4.RELEASE</code></p>
<p><code>Maven 3.6.3</code></p>
<p><code>ElasticSearch7.9.0</code></p>
</blockquote>
<h3 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-RestHighLevelClient-连接-ES"><a href="#使用-RestHighLevelClient-连接-ES" class="headerlink" title="使用 RestHighLevelClient 连接 ES"></a>使用 RestHighLevelClient 连接 ES</h2><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClientConfiguration configuration = ClientConfiguration.builder()</span><br><span class="line">                .connectedTo(hostAndPort)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> RestClients.create(configuration).rest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;user-doc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过姓名查找</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过姓名或desc查找</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc desc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByNameOrDesc</span><span class="params">(String name,String desc)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查询全部</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> user</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">Iterable&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加user列表</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> list user列表</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(List&lt;User&gt; list)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加suer</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> user user</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过姓名查找</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> name name</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> user</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过姓名或desc查找</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> name name</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> desc desc</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> user列表</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">List&lt;User&gt; <span class="title">findByNameOrDesc</span><span class="params">(String name, String desc)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="serviceImpl"><a href="#serviceImpl" class="headerlink" title="serviceImpl"></a>serviceImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Iterable&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.findAll();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(List&lt;User&gt; list)</span> </span>&#123;</span><br><span class="line">		list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		String str = <span class="string">&quot;帆乘   楷栋   锋枫   海勇   康帆   安礼   晓平   良帆   瑞翱   涛锟   恒勇   鸿驰   帆强   桓柏   锋寅   博槐   骞琛   桓钊   杰桓 &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  裕枫   福晖   槐仕   奇鹏   骏伟   允潍 &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  乘初   杞郁   柏安   皓宇   骏侠   礼德   哲晓   伟权   祥恒   澄震   浩浩   瑞权   延升   翱楷   锋轩   驰鹏   杞翱   康鹤   材福   晖锐&quot;</span> +</span><br><span class="line">				<span class="string">&quot; &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  信恒   凯锦   诚翱   震福   龙宇   祥帆 &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  梓瑞   林龙   日延   槐翰   日寅   起鸿   杞允   瑞锐   仕星   权铭   吉楷   寅星   林帝   皓仕   卓礼   家盛   海寅   盛胤   年禧   畅安&quot;</span> +</span><br><span class="line">				<span class="string">&quot; &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  炳龙   柏晖   诚年   彬坤   礼诚   濡凯 &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  驰晨   恒邦   帆晖   诚华   晖星   恒梓   禄彬   鹤华   锟升   桓浩   振尧   祥寅   楷辰   暄帝   锐梓   恒佑   文安   杰畅   加琛   俊泽&quot;</span> +</span><br><span class="line">				<span class="string">&quot; &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  乘驰   禄家   中鹤   家锦   皓初   凯震 &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  文韦   彬澄   起哲   海炳   鹤锋   贤逸   哲佑   海信   逸俊   炳年   礼郁   濡寅   晓泽   然延   喆加   天梓   泽锟   轩谛   盛翱   晨子&quot;</span> +</span><br><span class="line">				<span class="string">&quot; &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  诚吉   梁鹤   仕逸   升平   奇琛   杞沛 &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  胤邦   辰佑   骞佳   鸿鹏   翱坤   钊峰   哲锐   腾鑫   海阳   烁奇   安芃   浩瑞   星尧   驰炳   安沛   权成   华文   杞晨   柏柔   权彬&quot;</span> +</span><br><span class="line">				<span class="string">&quot; &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  祯晨   谛潍   驰安   安日   谷沛   帆华 &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  林翰   然震   琛星   泽杞   澄涛   龙欣   嘉辰   海禄   诚家   帆韦   澄濡   潍延   郁邦   锐礼   蔓材   畅震   腾诚   峰贤   轩潍   凡信&quot;</span> +</span><br><span class="line">				<span class="string">&quot; &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  翱年   祜帆   睿吉   祯博   强延   震鑫 &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  邦郁   禧祯   良梁   烁谛   成震   翱颜   加升   荣俊   晨骞   锦槐   烁安   鑫平   沛凯   德升   炳宇   远侠   晖鹏   腾谷   初帆   林然&quot;</span> +</span><br><span class="line">				<span class="string">&quot; &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  中禄   斌颜   颜浩   远帆   胤然   祜沛 &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  允锟   畅梁   栋材   泽柔   远锐   杞梁   凯濡   郁槐   家泽   暄乘   年权   文柏   潍禧   澄禧   奇锦   逸然   翰弘   华海   柏辞   瑞星&quot;</span> +</span><br><span class="line">				<span class="string">&quot; &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  胤佑   芃嘉   祜胤   逸杰   杰逸   材龙 &quot;</span> +</span><br><span class="line">				<span class="string">&quot;  允升   加韦   逸福   桓辞   枫濡   信然   栋祯\&quot; +\n&quot;</span> +</span><br><span class="line">				<span class="string">&quot;                \&quot;蓓菡   娜嘉   碧珊   菲昕   芸帆   怡莉   鸿莲   曦静   灵玥   橘婧   家曼   鹤丽   岚琳   格梅   呈梦   璇嘉   &quot;</span> +</span><br><span class="line">				<span class="string">&quot;月欣&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   楠敏   瑶丽   茹莲   杉歆   帆珍   琬彬&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   蓓昭   函璇   凌欢   歆蔚   妮萱   琛灵   婷媛   琳凌   岚冬   静鸿   珍倩   桂枫   玉岚   紫涵   桃婧   芳璟   韵珠   香萱   冰梅   &quot;</span> +</span><br><span class="line">				<span class="string">&quot;桂寒&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   呈曼   梅茹   雯帆   芙明   紫桂   霞玲&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   蓓莉   霞可   琪香   菲春   美俊   梦栀   鹤婧   帛菲   静芝   琳沛   玥薇   璟漫   弦茹   彦茜   花梓   歆曦   寒洁   莉梓   颖芙   &quot;</span> +</span><br><span class="line">				<span class="string">&quot;梓露&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   玉诗   桃橘   鹤霞   沛漫   月婧   玲阳&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   雅欢   珍月   璟紫   歆淑   韵琬   月玉   欢彦   寒娅   妍彤   梦萱   蕾芳   心彤   彩妮   寒玲   淑漫   茜桐   春楠   洲茜   月嘉   &quot;</span> +</span><br><span class="line">				<span class="string">&quot;欣云&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   珠香   岚韵   娜呈   妮弦   芸函   芳寒&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   萱林   云琳   莲菡   碧娅   莉凌   栀茜   蔚妮   惠婧   香心   初莉   颖淑   凡芝   璇灵   可蕾   静文   彩鹤   芙鑫   花楠   云梦   &quot;</span> +</span><br><span class="line">				<span class="string">&quot;菲茹&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   蓓玥   惠娅   凌芳   柔旭   琛楠   雪娜&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   蕾诗   芸珠   菡桂   蕾文   桃花   彩诗   彬洁   帆馨   雯春   芝韵   春雅   静紫   寒橘   冰淑   韵露   昭莲   诗晨   钰花   彩月   &quot;</span> +</span><br><span class="line">				<span class="string">&quot;昕欢&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   香可   菲婧   橘静   钰韵   霞心   彬雅&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   芙春   菲惠   萱曦   惠枫   舒薇   楠丽   栀珍   琳惠   歆冬   漫月   莲琛   琬梓   雨美   梦家   倩慧   俊薇   彬璇   敏玉   栀曼   &quot;</span> +</span><br><span class="line">				<span class="string">&quot;曦倩&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   蓓蔚   月茜   俊珍   茹帆   璐欢   芝珊&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   昕舒   娅璐   慧玉   春玥   舒静   颖楠   淑紫   漫彩   欢曼   芳歆   桂冰   芙薇   旭雅   璇冰   岚欣   岚玲   慧锦   克霞   萱丽   &quot;</span> +</span><br><span class="line">				<span class="string">&quot;采碧&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   洁昭   采彩   珊云   漫梦   萱凌   怡文&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   霞杉   敏怡   莉怡   怡露   格漫   瑶薇   沛菲   彦梦   妮馨   菲萱   敏桐   鹤菡   彬蓓   凌彤   珊莉   漫依   琪莲   欣霞   璟心   &quot;</span> +</span><br><span class="line">				<span class="string">&quot;梅薇&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   寒蓓   倩梓   采娜   琬雯   枫梅   花格&quot;</span> +</span><br><span class="line">				<span class="string">&quot;   馨可   杉璐   舒娅   沛香   颖茹   格玲   花柏   雨璟   欣薇&quot;</span>;</span><br><span class="line"></span><br><span class="line">		String[] names = str.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line"></span><br><span class="line">		String[] descArr = &#123;</span><br><span class="line">				<span class="string">&quot;大家好，我是雨天，因为刚好出生在雨天，老爸又刚好姓夏，于是“下雨天”就首发出场了，而且妈妈也希望我如雨后春笋、天天向上哦！呵呵后来因为一部分人实在不忍心在晴朗的天气里叫我雨天，为避免引起“混乱”，就只好舍弃了这个颇有个性的简单名字，退而成“小名“了。我的大名也简单，其实就一个“翌”字，因为我出生的日子刚好是爸爸妈妈结婚2周年纪念日的第二日。“夏翌”谐音宁波话“暇意”，大家希望我暇暇意意，呵呵，有点嫌”翌”字太文绉绉，就把它给拆了，一分为二成羽立了。&quot;</span></span><br><span class="line">				,</span><br><span class="line">				<span class="string">&quot;大家都说我是个阳光女孩，因为我是开心果啊。我老是坐不住，呵呵，能跟小椅子成为好朋友，是老师和爸爸妈妈现在的最大心愿。我喜欢跳舞，但最好能跟着音乐自己起舞，不用按老师的要求练基本功；我喜欢画画，但最好是信手涂鸦，把小朋友的脸画成绿色也没关系；我喜欢溜冰，但最有趣的还是约上三五好友，一起练习如何摔跤……&quot;</span></span><br><span class="line">				, <span class="string">&quot;昀昀是我在妈妈肚子里时的小名哦，我的大名叫曹铁瀛，妈妈怀我的时候和单位里的阿姨们玩牌经常是百战百胜，阿姨们说是因为我的缘故，干脆就叫“天赢”好了，爸妈取其谐音，就变成了“铁瀛”&quot;</span></span><br><span class="line">				, <span class="string">&quot;嘿！我——21号来报到了！智诰、诰诰、阿诰，你们爱怎么叫就怎么叫吧！反正都是我！我的名字是奶奶请一名先生取的，虽然有点迷信，但寄托了全家人的祝福！&quot;</span></span><br><span class="line">				,</span><br><span class="line">				<span class="string">&quot;还是汽车发烧友，小轿车、大卡车、集装箱、大客车、翻斗车、压路机……应有尽有（就差拖拉机还没有报到）。我常在家练习倒车、移库、爬坡、过单轨桥，考取驾照不成问题！！当然我也模拟制造几起车祸，掉进大河，深沟，追尾事故，因为那时我又能大显身手，汽车的零件装了又拆，拆了又装……哈哈！！角角落落都是我的杰作，缺胳膊少腿的，七零八落的，尽管汽车多，可完完整整的没几辆！这下，又有理由去买车啦！&quot;</span></span><br><span class="line">				,</span><br><span class="line">				<span class="string">&quot;我还喜欢画画。从小我就拿着笔画一个个的大圆圈，每天乐此不疲，整整画了半年多圆圈呢！够有毅力的吧！老师说我构图线条流畅，就是那样练出来的哦！以后我一定会继续努力的！可是我不太喜欢看书，妈妈让我看书，我老是心不在焉，左顾右盼，常常惹她不高兴，可我就是不喜欢嘛！&quot;</span></span><br><span class="line">				, <span class="string">&quot;我的性格有点内向、腼腆、不喜欢“显山露水”。我最喜欢体育项目了，最“痴迷”的就是体育频道：乒乓球、羽毛球、台球、足球、篮球、跳水~~，当然我也喜欢打牌（这可是遗传）。&quot;</span></span><br><span class="line">				, <span class="string">&quot;我的个子很高，被称为“帅哥”，因此彼得女孩子的欢心哦，等我长大了，我要娶七个“老婆”，其中三个为：外婆、爸爸和妈妈。 我的目标是考上北大。\n&quot;</span></span><br><span class="line">				, <span class="string">&quot;我当时的第一反应是：这两个字可以跟名人的名字做一个联系，然后做一个介绍。我说你介绍的时候可以跟别人讲：&quot;</span></span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//模拟数据</span></span><br><span class="line">		Random random = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> j = random.nextInt(names.length);</span><br><span class="line">			<span class="keyword">int</span> k = random.nextInt(descArr.length);</span><br><span class="line">			<span class="comment">// 第一个参数是id，所以无论运行多少次，都只会添加100条数据</span></span><br><span class="line">			<span class="comment">// 如果id存在，es更新；不存在，es添加</span></span><br><span class="line">			User user = <span class="keyword">new</span> User(i, names[j], i, String.valueOf(i % <span class="number">2</span>), descArr[k]);</span><br><span class="line">			list.add(user);</span><br><span class="line">		&#125;</span><br><span class="line">		userDao.saveAll(list);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">		userDao.save(user);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.findByName(name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByNameOrDesc</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.findByNameOrDesc(name, desc);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Iterable&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userService.findAll();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/saveList&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;User&gt; list = <span class="keyword">null</span>;</span><br><span class="line">		userService.save(list);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">		userService.save(user);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/findByName&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userService.findByName(name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/findByNameOrDesc&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByNameOrDesc</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userService.findByNameOrDesc(name, desc);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><code>SpringBoot</code> 启动后会自动创建 <code>user-doc</code> 索引</li>
<li><code>Chrome</code> 或 <code>PostMan</code> 请求 <code>localhost:8080/saveList</code> 添加数据</li>
<li><code>localhost:8080/findAll</code> 查看数据</li>
</ul>
<h3 id="Kibana查看数据"><a href="#Kibana查看数据" class="headerlink" title="Kibana查看数据"></a>Kibana查看数据</h3><img src="https://mycos-1301623763.cos.ap-chengdu.myqcloud.com/blog/2020-11-05/2020-11-05-es-1.png" width=75%>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 数组</title>
    <url>/2020/11/09/ES6-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ES6数组去重"><a href="#ES6数组去重" class="headerlink" title="ES6数组去重"></a>ES6数组去重</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [要去重的数组];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">arr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">item, next</span>)</span>&#123;</span><br><span class="line">    obj[next.要去重的值] ? <span class="string">&quot;&quot;</span> : (obj[next.要去重的值] = <span class="literal">true</span> &amp;&amp; item.push(next));</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="comment">// 打印去重后的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>



<h2 id="ES6-数组方法"><a href="#ES6-数组方法" class="headerlink" title="ES6 数组方法"></a>ES6 数组方法</h2><h3 id="arr-push"><a href="#arr-push" class="headerlink" title="arr.push()"></a>arr.push()</h3><p><strong>从后面添加元素，返回值为添加完后的数组的长度。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">5</span>))	<span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)	<span class="comment">// [1, 2, 3, 4, 5, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-pop"><a href="#arr-pop" class="headerlink" title="arr.pop()"></a>arr.pop()</h3><p><strong>从后面删除元素，只能是一个，返回值是删除的元素。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop())	<span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)	<span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-shift"><a href="#arr-shift" class="headerlink" title="arr.shift()"></a>arr.shift()</h3><p><strong>从前面删除元素，只能删除一个，返回值是删除的元素。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.shift())	<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)	<span class="comment">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-unshift"><a href="#arr-unshift" class="headerlink" title="arr.unshift()"></a>arr.unshift()</h3><p><strong>从前面添加元素，返回值是添加完后的数组的长度。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">2</span>))	<span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)	<span class="comment">// [2, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-splice-i-n"><a href="#arr-splice-i-n" class="headerlink" title="arr.splice(i, n)"></a>arr.splice(i, n)</h3><p><strong>删除从 i (索引值)开始之后的那个元素，返回值是删除的元素。</strong></p>
<table>
<thead>
<tr>
<th>i</th>
<th>n</th>
</tr>
</thead>
<tbody><tr>
<td>索引值</td>
<td>个数</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>, <span class="number">2</span>))	<span class="comment">// [3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)	<span class="comment">// [1, 2, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-concat"><a href="#arr-concat" class="headerlink" title="arr.concat()"></a>arr.concat()</h3><p><strong>连接两个数组，返回值为连接后的新数组。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.concat([<span class="number">1</span>, <span class="number">2</span>]))	<span class="comment">// [1, 2, 3, 4, 5, 1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)	<span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="str-split"><a href="#str-split" class="headerlink" title="str.split()"></a>str.split()</h3><p><strong>将字符串转化为数组。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;&quot;</span>))	<span class="comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-sort"><a href="#arr-sort" class="headerlink" title="arr.sort()"></a>arr.sort()</h3><p><strong>将数组进行排序，返回值是排好的数组，默认是按照最左边的数字进行排序，不是按照数字大小排序的。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">22</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort())	<span class="comment">// [1, 10, 2, 22, 3, 4, 6]</span></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)	<span class="comment">// [1, 2, 3, 4, 6, 10, 22]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> b - a)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)	<span class="comment">// [22, 10, 6, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-reverse"><a href="#arr-reverse" class="headerlink" title="arr.reverse()"></a>arr.reverse()</h3><p><strong>将数组反转，返回值是反转后的数组。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.reverse())	<span class="comment">// [5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)	<span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-slice-start-end"><a href="#arr-slice-start-end" class="headerlink" title="arr.slice(start,end)"></a>arr.slice(start,end)</h3><p><strong>切去索引值 start 到索引值 end 的数组，不包含 end 索引的值，返回值是切出来的数组。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">3</span>))	<span class="comment">// [2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)	<span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-forEach-callback"><a href="#arr-forEach-callback" class="headerlink" title="arr.forEach(callback)"></a>arr.forEach(callback)</h3><p><strong>遍历数组，无 return。</strong></p>
<table>
<thead>
<tr>
<th>value</th>
<th>index</th>
<th>array</th>
</tr>
</thead>
<tbody><tr>
<td>当前索引的值</td>
<td>索引</td>
<td>原数组</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;value:$&#123;value&#125; index:$&#123;index&#125; array:$&#123;array&#125;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// value: 1  index: 0  array: 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="comment">// value: 2  index: 1  array: 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="comment">// value: 3  index: 2  array: 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="comment">// value: 4  index: 3  array: 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="comment">// value: 5  index: 4  array: 1, 2, 3, 4, 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    value = value * <span class="number">2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;value:$&#123;value&#125; index:$&#123;index&#125; array:$&#123;array&#125;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// value: 2  index: 0  array: 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="comment">// value: 4  index: 1  array: 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="comment">// value: 6  index: 2  array: 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="comment">// value: 8  index: 3  array: 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="comment">// value: 10  index: 4  array: 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-map-callback"><a href="#arr-map-callback" class="headerlink" title="arr.map(callback)"></a>arr.map(callback)</h3><p><strong>映射数组(遍历数组)，有 return 返回一个新数组。</strong></p>
<table>
<thead>
<tr>
<th>value</th>
<th>index</th>
<th>array</th>
</tr>
</thead>
<tbody><tr>
<td>当前索引的值</td>
<td>索引</td>
<td>原数组</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.map(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    value = value * <span class="number">2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;value:$&#123;value&#125; index:$&#123;index&#125; array:$&#123;array&#125;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong><em>arr.forEach() 和 arr.map() 的区别</em></strong></p>
<ul>
<li>arr.forEach() 是和 for 循环一样，是代替 for。arr.map() 是修改数组其中的数据，并返回新的数据。</li>
<li>arr.forEach() 没有 return。arr.map() 有 return。</li>
</ul>
</blockquote>
<h3 id="arr-filter-callback"><a href="#arr-filter-callback" class="headerlink" title="arr.filter(callback)"></a>arr.filter(callback)</h3><p><strong>过滤数组，返回一个满足要求的数组。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.filter(<span class="function">(<span class="params">i, v</span>) =&gt;</span> i &lt; <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)	<span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-every-callback"><a href="#arr-every-callback" class="headerlink" title="arr.every(callback)"></a>arr.every(callback)</h3><p><strong>依据判断条件，数组的元素是否全满足，若满足则返回true。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.every(<span class="function">(<span class="params">i, v</span>) =&gt;</span> i &lt; <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)	<span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.every(<span class="function">(<span class="params">i, v</span>) =&gt;</span> i &lt; <span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)	<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-some"><a href="#arr-some" class="headerlink" title="arr.some()"></a>arr.some()</h3><p><strong>依据判断条件，数组的元素是否有一个满足，若有一个满足则返回 true。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.some(<span class="function">(<span class="params">i, v</span>) =&gt;</span> i &lt; <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)	<span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.some(<span class="function">(<span class="params">i, v</span>) =&gt;</span> i &gt; <span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)	<span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="arr-reduce-callback-initialValue"><a href="#arr-reduce-callback-initialValue" class="headerlink" title="arr.reduce(callback,initialValue)"></a>arr.reduce(callback,initialValue)</h3><p><strong>迭代数组的所有项，累加器，数组中的每个值(从左到右)合并，最终计算为一个值。</strong></p>
<ul>
<li>callback<ul>
<li>previousValue：必选，上一次调用回调返回的值，或者是提供的初始值(initialValue)</li>
<li>currentValue：必选，数组中当前被处理的数组项</li>
<li>index：可选，当前数组项在数组中的索引值</li>
<li>array：可选，原数组</li>
</ul>
</li>
<li>initialValue：可选，初始值</li>
</ul>
<blockquote>
<p><strong><em>实行方法</em></strong></p>
<p>回调函数第一次执行时，previousValue 和 currentValue 可以是一个值，如果 initivalValue 在调用 reduce() 时被提供，那么第一个 previousValue 等于 initivalValue，并且 currentValue 等于数组中的第一个值；如果 initivalValue 未被提供，那么 previousValue 等于数组中的第一个值。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.reduce(<span class="function">(<span class="params">previousValue, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">    previousValue + currentValue</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)	<span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Github下载源</title>
    <url>/2020/11/13/Github%E4%B8%8B%E8%BD%BD%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Github下载源设置"><a href="#Github下载源设置" class="headerlink" title="Github下载源设置"></a>Github下载源设置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 源地址</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/xxx/xxx.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源 1</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/xxx/xxx.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源 2</span></span><br><span class="line">git <span class="built_in">clone</span> https://hub.fastgit.org/xxx/xxx.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源 3</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitclone.com/github.com/xxx/xxx.git</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DevTools</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL调优</title>
    <url>/2020/11/16/SQL%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL-规范性检查"><a href="#SQL-规范性检查" class="headerlink" title="SQL 规范性检查"></a>SQL 规范性检查</h1><h2 id="SELECT-检查"><a href="#SELECT-检查" class="headerlink" title="SELECT 检查"></a>SELECT 检查</h2><h3 id="UDF-用户自定义函数"><a href="#UDF-用户自定义函数" class="headerlink" title="UDF 用户自定义函数"></a>UDF 用户自定义函数</h3><p>SQL 语句的 SELECT 后面使用了自定义函数 UDF，SQL 返回多少行，那么 UDF 函数就会被调用多少次，非常影响性能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># getOrderNo 是用户自定义的一个函数，用户根据 order_sn 来获取订单编号</span><br><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	payment_id,</span><br><span class="line">	order_sn,</span><br><span class="line">	getOrderNo ( order_sn ) </span><br><span class="line">FROM</span><br><span class="line">	payment_transaction </span><br><span class="line">WHERE</span><br><span class="line">	status &#x3D; 1 </span><br><span class="line">	AND creat_time BETWEEN &#39;2020-10-01 10:00:00&#39; </span><br><span class="line">	AND &#39;2020-10-02 10:00:00&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="TEXT-类型检查"><a href="#TEXT-类型检查" class="headerlink" title="TEXT 类型检查"></a>TEXT 类型检查</h3><p>如果 SELECT 出现 TEXT 类型的字段，就会消耗大量的网络和 IO 带宽，由于返回的内容过大超过 max_allowed_packet 设置会导致程序报错，需要谨慎使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 表 request_log 中 content 是 text 类型</span><br><span class="line">SELECT</span><br><span class="line">	user_id,</span><br><span class="line">	content,</span><br><span class="line">	status,</span><br><span class="line">	url,</span><br><span class="line">	type </span><br><span class="line">FROM</span><br><span class="line">	request_log </span><br><span class="line">WHERE</span><br><span class="line">	user_id &#x3D; 11111;</span><br></pre></td></tr></table></figure>

<h3 id="group-concat-谨慎使用"><a href="#group-concat-谨慎使用" class="headerlink" title="group_concat 谨慎使用"></a>group_concat 谨慎使用</h3><p>group_concat 是一个字符串聚合函数，会影响 SQL 的响应时间，如果返回的值过大超过了 max_allowed_packet 设置会导致程序报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	batch_id,</span><br><span class="line">	group_concat( name ) </span><br><span class="line">FROM</span><br><span class="line">	buffer_batch </span><br><span class="line">WHERE</span><br><span class="line">	status &#x3D; 0 </span><br><span class="line">	AND create_time BETWEEN &#39;2020-10-01 10:00:00&#39; </span><br><span class="line">	AND &#39;2020-10-02 10:00:00&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="内联子查询"><a href="#内联子查询" class="headerlink" title="内联子查询"></a>内联子查询</h3><p>在 SELECT 后面有子查询的情况称为内联子查询，SQL 返回多少行，子查询就需要执行过多少次，严重影响 SQL 性能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT id,( SELECT rule_name FROM member_rule LIMIT 1 ) AS rule_name,</span><br><span class="line">member_id,</span><br><span class="line">member_type,</span><br><span class="line">member_name,</span><br><span class="line">status </span><br><span class="line">FROM</span><br><span class="line">	member_info m </span><br><span class="line">WHERE</span><br><span class="line">	STATUS &#x3D; 1 </span><br><span class="line">	AND create_time BETWEEN &#39;2020-09-02 10:00:00&#39; </span><br><span class="line">	AND &#39;2020-10-01 10:00:00&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="FROM-检查"><a href="#FROM-检查" class="headerlink" title="FROM 检查"></a>FROM 检查</h2><h3 id="表的连接方式"><a href="#表的连接方式" class="headerlink" title="表的连接方式"></a>表的连接方式</h3><p>在 MySQL 中不建议使用 LEFT JOIN，即使 ON 过滤条件列索引，一些情况也不会走索引，导致大量的数据行被扫描，SQL 性能变得很差，同时要清楚 ON 和 WHERE 的区别。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	a.member_id,</span><br><span class="line">	a.create_time,</span><br><span class="line">	b.active_time </span><br><span class="line">FROM</span><br><span class="line">	operation_log a</span><br><span class="line">	LEFT JOIN member_info b ON a.member_id &#x3D; b.member_id </span><br><span class="line">WHERE</span><br><span class="line">	b.status &#x3D; 1 </span><br><span class="line">	AND a.create_time BETWEEN &#39;2020-10-01 00:00:00&#39; </span><br><span class="line">	AND &#39;2020-10-30 00:00:00&#39; </span><br><span class="line">	LIMIT 100,</span><br><span class="line">	0;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>ON 和 WHERE 的区别</strong></p>
<ul>
<li>先执行 ON，后执行 WHERE；ON 是建立关联关系，WHERE 是对关联关系的筛选。</li>
<li>对于 LEFT JOIN，不管 ON 后面跟什么条件，左表的数据全部查出来，因此要想过滤需要把条件放到 WHERE 后面。</li>
<li>对于 INNER JOIN，满足 ON 后面的条件表的数据才能查出，可以起到过滤作用。也可以把条件放到 WHERE 后面。</li>
</ul>
</blockquote>
<blockquote>
<p><strong>为什么 MySQL 不推荐使用子查询和 JOIN</strong></p>
<h3 id="1-应用层关联的优势"><a href="#1-应用层关联的优势" class="headerlink" title="1. 应用层关联的优势"></a>1. 应用层关联的优势</h3><ul>
<li><strong>让缓存的效率更高。</strong><ul>
<li>许多应用程序可以方便的缓存单表查询对应的结果对象。如果关联中的某个表发生了变化，那么就无法使用查询缓存，而拆分后，如果某个表很少改变，那么基于该表的查询就可以重复利用查询缓存结果。</li>
</ul>
</li>
<li><strong>将查询分解后，执行单个查询可以减少锁的竞争。</strong></li>
<li><strong>在应用层做关联，可以更容易对数据库进行拆分，更容易做到高性能和可扩展。</strong></li>
<li><strong>查询本身效率也可能会有所提升。</strong><ul>
<li>查询 id 集的时候，使用 IN() 代替关联查询，可以让 MySQL 按照 id 顺序进行查询，这可能比随机的关联要更高效。</li>
</ul>
</li>
<li><strong>可以减少冗余记录的查询。</strong><ul>
<li>在应用层做关联查询，意味着对于某条记录应用只需要查询一次，而在数据库中做关联查询，则可能需要重复地访问一部分数据。从这点看，这样的重构还可能会减少网络和内存的消耗。</li>
</ul>
</li>
<li><strong>这样做相当于在应用中实现了哈希关联，而不是使用 MySQL 的嵌套循环关联。某些场景哈希关联的效率要高很多。</strong></li>
</ul>
<h3 id="2-应用层关联的使用场景"><a href="#2-应用层关联的使用场景" class="headerlink" title="2. 应用层关联的使用场景"></a>2. 应用层关联的使用场景</h3><ul>
<li>当应用能够方便的缓存单个查询结果时；</li>
<li>当可以将数据分布到不同的 MySQL 服务器上时；</li>
<li>当能够使用 IN() 的方式代替关联查询时；</li>
<li>并发场景多，DB 查询频繁，需要分库分表时。</li>
</ul>
<h3 id="3-不推荐使用-JOIN-的原因"><a href="#3-不推荐使用-JOIN-的原因" class="headerlink" title="3. 不推荐使用 JOIN 的原因"></a>3. 不推荐使用 JOIN 的原因</h3><ul>
<li><strong>DB 承担的业务压力过大，能减少负担就减少</strong>。<ul>
<li>当表处于<code>百万级别</code>后，JOIN 导致性能下降。</li>
</ul>
</li>
<li><strong>分布式的分库分表</strong>。<ul>
<li>这种时候是不建议跨库 JOIN 的，目前 MySQL 的分布式中间件，跨库 JOIN 表现不良。</li>
</ul>
</li>
<li><strong>修改表的 schema</strong><ul>
<li>单表查询的修改比较容易，JOIN 写的 SQL 语句要修改，不容易发现，成本比较大，当系统比较大时，不好维护。</li>
</ul>
</li>
</ul>
<h3 id="4-不使用-JOIN-的解决方法"><a href="#4-不使用-JOIN-的解决方法" class="headerlink" title="4. 不使用 JOIN 的解决方法"></a>4. 不使用 JOIN 的解决方法</h3><p>在<strong>业务层</strong>，单表查出数据后，作为条件给下一个单表查询，也就是<strong>子查询</strong>。会担心子查询出来的结果集太多，MySQL 对 IN 的数量没有限制，但是 MySQL 限制整条 SQL 语句的大小。通过调整参数 <code>max_allowed_packet</code>，可以修改一条 SQL 的最大值。建议在业务层上做好处理，限制一次查询出来的结果集是能接受的。</p>
<h3 id="5-JOIN-查询的好处"><a href="#5-JOIN-查询的好处" class="headerlink" title="5. JOIN 查询的好处"></a>5. JOIN 查询的好处</h3><ul>
<li>可以做分页；</li>
<li>可以用副表的字段做查询条件，在查询的时候，将副表匹配到的字段作为结果集，用主表去 IN 它；<ul>
<li>但是匹配到的数据量太大就不行了，也会导致返回的分页记录跟实际的不一样。解决的方法可以交给前端，一次性查询，让前端分批显示，这种解决方案的前提是数据量不大，因为 SQL 本身长度有限。</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>由于 MySQL 基于成本的优化器 CBO 对子查询的处理能力较弱，不建议使用子查询，可以改写成 INNER JOIN。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	b.member_id,</span><br><span class="line">	b.member_type,</span><br><span class="line">	a.create_time,</span><br><span class="line">	a.device_model </span><br><span class="line">FROM</span><br><span class="line">	member_operation_log a</span><br><span class="line">	INNER JOIN ( SELECT member_id, member_type FROM member_base_info WHERE status &#x3D; 1 AND create_time BETWEEN &#39;2020-10-01 00:00:00&#39; AND &#39;2020-10-30 00:00:00&#39; ) AS b ON a.member_id &#x3D; b.member_id;</span><br></pre></td></tr></table></figure>

<h2 id="WHERE-检查"><a href="#WHERE-检查" class="headerlink" title="WHERE 检查"></a>WHERE 检查</h2><h3 id="索引列被运算"><a href="#索引列被运算" class="headerlink" title="索引列被运算"></a>索引列被运算</h3><p>当一个字段被索引，同时出现在 WHERE 条件后面，是不能进行任何运算的，会导致索引失效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># device_no 列上有索引，由于使用了 ltrim 函数导致索引失效</span><br><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	NAME,</span><br><span class="line">	phone,</span><br><span class="line">	address,</span><br><span class="line">	device_no </span><br><span class="line">FROM</span><br><span class="line">	users </span><br><span class="line">WHERE</span><br><span class="line">	ltrim( device_no ) &#x3D; &#39;Hfs1212121&#39;;</span><br><span class="line">	</span><br><span class="line"># balance 列有索引,由于做了运算导致索引失效</span><br><span class="line">SELECT</span><br><span class="line">	account_no,</span><br><span class="line">	balance </span><br><span class="line">FROM</span><br><span class="line">	accounts </span><br><span class="line">WHERE</span><br><span class="line">	balance + 100 &#x3D; 10000 </span><br><span class="line">	AND STATUS &#x3D; 1;</span><br></pre></td></tr></table></figure>

<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>对于 INT 类型的字段，传 VARCHAR 类型的值是可以走索引的，MySQL 内部自动做了隐式类型转换；相反对于 VARCHAR 类型的字段传入 INT 类型的值是无法走索引的，应该做到对应字段的类型传对应类型的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># user_id 是 bigint 类型，传入 varchar 值发生了隐式类型转换，可以走索引。</span><br><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	NAME,</span><br><span class="line">	phone,</span><br><span class="line">	address,</span><br><span class="line">	device_no </span><br><span class="line">FROM</span><br><span class="line">	users </span><br><span class="line">WHERE</span><br><span class="line">	user_id &#x3D; &#39;23126&#39;;</span><br><span class="line">	</span><br><span class="line"># card_no 是 varchar(20)，传入 int 值是无法走索引</span><br><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	NAME,</span><br><span class="line">	phone,</span><br><span class="line">	address,</span><br><span class="line">	device_no </span><br><span class="line">FROM</span><br><span class="line">	users </span><br><span class="line">WHERE</span><br><span class="line">	card_no &#x3D; 2312612121;</span><br></pre></td></tr></table></figure>

<h3 id="列字符集"><a href="#列字符集" class="headerlink" title="列字符集"></a>列字符集</h3><p>从 MySQL 5.6 开始建议所有对象字符集应该使用 utf8mb4，包括 MySQL 实例字符集，数据库字符集，表字符集，列字符集。避免在关联查询 JOIN 时字段字符集不匹配导致索引失效，同时目前只有 utf8mb4 支持 emoji 表情存储。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数据库实例字符集</span><br><span class="line">character_set_server &#x3D; utf8mb4</span><br><span class="line"># 连接字符集</span><br><span class="line">character_set_connection &#x3D; utf8mb4</span><br><span class="line"># 数据库字符集</span><br><span class="line">character_set_database &#x3D; utf8mb4</span><br><span class="line"># 结果集字符集</span><br><span class="line">character_set_results &#x3D; utf8mb4</span><br></pre></td></tr></table></figure>

<h2 id="GROUP-BY-检查"><a href="#GROUP-BY-检查" class="headerlink" title="GROUP BY 检查"></a>GROUP BY 检查</h2><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>GROUP BY 后面的列有索引，索引可以消除排序带来的 CPU 开销，如果是前缀索引，是不能消除排序的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#device_no字段类型varchar(200)，创建了前缀索引。</span><br><span class="line">mysql &gt; ALTER TABLE users ADD INDEX idx_device_no (</span><br><span class="line">device_no ( 64 ));</span><br><span class="line">mysql &gt; SELECT</span><br><span class="line">device_no,</span><br><span class="line">count(*) </span><br><span class="line">FROM</span><br><span class="line">	users </span><br><span class="line">WHERE</span><br><span class="line">	create_time BETWEEN &#39;2020-10-01 00:00:00&#39; </span><br><span class="line">	AND &#39;2020-10-30 00:00:00&#39; </span><br><span class="line">GROUP BY</span><br><span class="line">	device_no;</span><br></pre></td></tr></table></figure>

<h3 id="函数运算"><a href="#函数运算" class="headerlink" title="函数运算"></a>函数运算</h3><p>假设需要统计某月每天的新增用户量，参考如下 SQL 语句，虽然可以走 create_time 的索引，但是不能消除排序，可以考虑冗余一个字段 stats_date <code>date</code> 类型来解决这种问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	DATE_FORMAT( create_time, &#39;%Y-%m-%d&#39; ),</span><br><span class="line">	count(*) </span><br><span class="line">FROM</span><br><span class="line">	users </span><br><span class="line">WHERE</span><br><span class="line">	create_time BETWEEN &#39;2020-09-01 00:00:00&#39; </span><br><span class="line">	AND &#39;2020-09-30 23:59:59&#39; </span><br><span class="line">GROUP BY</span><br><span class="line">	DATE_FORMAT( create_time, &#39;%Y-%m-%d&#39; );</span><br></pre></td></tr></table></figure>

<h2 id="ORDER-BY-检查"><a href="#ORDER-BY-检查" class="headerlink" title="ORDER BY 检查"></a>ORDER BY 检查</h2><h3 id="前缀索引-1"><a href="#前缀索引-1" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>ORDER BY 后面的列有索引，索引可以消除排序带来的 CPU 开销，如果是前缀索引，是不能消除排序的。</p>
<h3 id="字段顺序"><a href="#字段顺序" class="headerlink" title="字段顺序"></a>字段顺序</h3><p>排序字段顺序，ASC/DESC 升降要跟索引保持一致，充分利用索引的有序性，来消除排序带来的 CPU 开销。</p>
<h2 id="LIMIT-检查"><a href="#LIMIT-检查" class="headerlink" title="LIMIT 检查"></a>LIMIT 检查</h2><h3 id="LIMIT-m-n-要慎重"><a href="#LIMIT-m-n-要慎重" class="headerlink" title="LIMIT m, n 要慎重"></a>LIMIT m, n 要慎重</h3><p>对于 LIMIT m, n 分页查询，越往后面翻页即 m 越大的情况下 SQL 的耗时会越来越长，对于这种应该先取出主键 id，然后通过主键 id 跟原表进行 JOIN 关联查询。</p>
<h1 id="表结构检查"><a href="#表结构检查" class="headerlink" title="表结构检查"></a>表结构检查</h1><h2 id="表-amp-列名关键字"><a href="#表-amp-列名关键字" class="headerlink" title="表&amp;列名关键字"></a>表&amp;列名关键字</h2><p>在数据库设计建模阶段，对表名及字段名设置要合理，不能使用 MySQL 的关键字，如 DESC, ORDER, STATUS, GROUP 等。同时建议设置 lower_case_table_names = 1 表名不区分大小写。</p>
<h2 id="表存储引擎"><a href="#表存储引擎" class="headerlink" title="表存储引擎"></a>表存储引擎</h2><p>对于 OLTP 业务系统，建议使用 InnoDB 引擎获取更好的性能，可以通过参数 default_storage_engine 控制。</p>
<h2 id="AUTO-INCREMENT-属性"><a href="#AUTO-INCREMENT-属性" class="headerlink" title="AUTO_INCREMENT 属性"></a>AUTO_INCREMENT 属性</h2><p>建表的时候主键 id 带有 AUTO_INCREMENT 属性，而且 AUTO_INCREMENT = 1，在 InnoDB 内部是通过一个系统全局变量 dict_sys.row_id 来计数，row_id 是一个 8 字节的 bigint unsigned，InnoDB 在设计时只给 row_id 保留了 6 个字节的长度，这样 row_id 取值范围就是 0~2^48 - 1，如果 id 的值达到了最大值，下一个值就从 0 开始继续循环递增，在代码中禁止指定主键 id 值插入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 新插入的 id 值会从 10001 开始，这是不对的，应该从 1 开始。</span><br><span class="line">CREATE TABLE booking ( &#96;id&#96; BIGINT ( 20 ) NOT NULL AUTO_INCREMENT COMMENT &#39;主键id&#39;,......) ENGINE &#x3D; INNODB auto_increment &#x3D; 10000;</span><br><span class="line"># 指定了 id 值插入，后续自增就会从该值开始 +1，索引禁止指定 id 值插入。</span><br><span class="line">INSERT INTO booking ( id, book_sn )</span><br><span class="line">VALUES</span><br><span class="line">	( 1234551121, &#39;N12121&#39; );</span><br></pre></td></tr></table></figure>

<h2 id="NOT-NULL-属性"><a href="#NOT-NULL-属性" class="headerlink" title="NOT NULL 属性"></a>NOT NULL 属性</h2><p>根据业务含义，尽量将字段都添加上 NOT NULL DEFAULT VALUE 属性，如果列值存储了大量的 NULL，会影响索引的稳定性。</p>
<h2 id="DEFAULT-属性"><a href="#DEFAULT-属性" class="headerlink" title="DEFAULT 属性"></a>DEFAULT 属性</h2><p>在创建表的时候，建议每个字段尽量都有默认值，禁止 DEFAULT NULL，而是对字段类型填充响应的默认值。</p>
<h2 id="COMMENT-属性"><a href="#COMMENT-属性" class="headerlink" title="COMMENT 属性"></a>COMMENT 属性</h2><p>字段的备注要能明确该字段的作用，尤其是某些表示状态的字段，要显式地写出该字段所有可能的状态数值以及该数值的含义。</p>
<h2 id="TEXT-类型"><a href="#TEXT-类型" class="headerlink" title="TEXT 类型"></a>TEXT 类型</h2><p>不建议使用 TEXT 数据类型，一方面由于传输大量的数据包可能会超过 max_allowed_packet 设置导致程序报错，另一方面表上的 DML 操作都会变得很慢，建议采用 ES 或者对象存储 OSS 来存储和检索。</p>
<h1 id="索引检查"><a href="#索引检查" class="headerlink" title="索引检查"></a>索引检查</h1><h2 id="索引属性"><a href="#索引属性" class="headerlink" title="索引属性"></a>索引属性</h2><p>索引基数指的是被索引的列唯一值的个数，唯一值越多接近表的 count(*) 说明索引的选择率越高，通过索引扫描的行数就越少，性能就越高，例如主键 id 的选择率是 100%，在 MySQL 中尽量所有的 UPDATE 都使用主键 id 去更新，因为 id 是聚集索引存储着整行数据，不需要回表，性能是最高的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql &gt; SELECT</span><br><span class="line">count(*) </span><br><span class="line">FROM</span><br><span class="line">	member_info;</span><br><span class="line">+----------+ | count(*) | +----------+ | 148416 | +----------+ 1 ROW IN </span><br><span class="line">SET ( 0.35 sec ) mysql &gt; SHOW INDEX </span><br><span class="line">FROM</span><br><span class="line">	member_base_info;</span><br><span class="line">+------------------+------------+----------------------------+--------------+-------------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ | TABLE | Non_unique | Key_name | Seq_in_index | Column_name | COLLATION | Cardinality | Sub_part | Packed | NULL | Index_type | COMMENT | Index_comment | +------------------+------------+----------------------------+--------------+-------------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ | member_info | 0 | PRIMARY | 1 | id | A | 131088 | NULL | NULL | | BTREE | | | | member_info | 0 | uk_member_id | 1 | member_id | A | 131824 | NULL | NULL | | BTREE | | | | member_info | 1 | idx_create_time | 1 | create_time | A | 6770 | NULL | NULL | | BTREE | | | +------------------+------------+----------------------------+--------------+-------------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ #Table： 表名</span><br><span class="line">#Non_unique ：是否为unique index，0-是，1-否。</span><br><span class="line">#Key_name：索引名称</span><br><span class="line">#Seq_in_index：索引中的顺序号，单列索引-都是1；复合索引-根据索引列的顺序从1开始递增。</span><br><span class="line">#Column_name：索引的列名</span><br><span class="line">#Collation：排序顺序，如果没有指定asc&#x2F;desc，默认都是升序ASC。</span><br><span class="line">#Cardinality：索引基数-索引列唯一值的个数。</span><br><span class="line">#sub_part：前缀索引的长度；例如index (member_name(10)，长度就是10。</span><br><span class="line">#Packed：索引的组织方式，默认是NULL。</span><br><span class="line">#Null：YES:索引列包含Null值；&#39;&#39;:索引不包含Null值。</span><br><span class="line">#Index_type：默认是BTREE，其他的值FULLTEXT，HASH，RTREE。</span><br><span class="line">#Comment：在索引列中没有被描述的信息，例如索引被禁用。</span><br><span class="line">#Index_comment：创建索引时的备注。</span><br></pre></td></tr></table></figure>

<h2 id="前缀索引-2"><a href="#前缀索引-2" class="headerlink" title="前缀索引"></a>前缀索引</h2><p>对于变长的字符串类型 VARCHAR(m)，为了减少 key_len，可以考虑创建前缀索引，但是前缀索引不能消除 GROUP BY，ORDER BY 带来排序开销。如果字段的实际最大值比 m 小很多，建议缩小字段长度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE member_info ADD INDEX idx_member_name_part (</span><br><span class="line">member_name ( 10 ));</span><br></pre></td></tr></table></figure>

<h2 id="复合索引顺序"><a href="#复合索引顺序" class="headerlink" title="复合索引顺序"></a>复合索引顺序</h2><p>有很多人喜欢在创建复合索引的时候，总以为前导列一定是唯一值多的列，例如索引 <code>index idx_create_time_status(create_time, status)</code>，这个索引往往是无法命中，因为扫描的 IO 次数太多，总体的 cost 比全表扫描还大，CBO 最终的选择是走 <code>full table scan</code>。</p>
<p>MySQL 遵循的是<strong>索引最左匹配原则</strong>，对于复合索引，从左到右依次扫描索引列，到遇到第一个范围查询 <code>(&gt;=, &gt;, &lt;, &lt;=, BETWEEN ...... AND ......)</code> 就停止扫描，索引正确的索引顺序应该是 <code>index idx_status_create_time(status, create_time)</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	account_no,</span><br><span class="line">	balance </span><br><span class="line">FROM</span><br><span class="line">	accounts </span><br><span class="line">WHERE</span><br><span class="line">	status &#x3D; 1 </span><br><span class="line">	AND create_time BETWEEN &#39;2020-09-01 00:00:00&#39; </span><br><span class="line">	AND &#39;2020-09-30 23:59:59&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="时间列索引"><a href="#时间列索引" class="headerlink" title="时间列索引"></a>时间列索引</h2><p>对于默认字段 <code>create_at(create_time)、update_at(update_time)</code> 这种默认就应该创建索引，一般来说是默认的规则。</p>
<h1 id="SQL-优化案例"><a href="#SQL-优化案例" class="headerlink" title="SQL 优化案例"></a>SQL 优化案例</h1><p>通过对慢查询的监控告警，经常发现一些 SQL 语句 WHERE 过滤字段都有索引，但是由于 SQL 写法的问题导致索引失效，下面两个案例说明如何通过 SQL 改写来查询。可以通过以下 SQL 来捞取最近 5 分钟的慢查询进行告警。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	CONCAT(</span><br><span class="line">		&#39;# Time: &#39;,</span><br><span class="line">		DATE_FORMAT( start_time, &#39;%y%m%d %H%i%s&#39; ),</span><br><span class="line">		&#39;\n&#39;,</span><br><span class="line">		&#39;# User@Host: &#39;,</span><br><span class="line">		user_host,</span><br><span class="line">		&#39;\n&#39;,</span><br><span class="line">		&#39;# Query_time: &#39;,</span><br><span class="line">		TIME_TO_SEC( query_time ),</span><br><span class="line">		&#39;  Lock_time: &#39;,</span><br><span class="line">		TIME_TO_SEC( lock_time ),</span><br><span class="line">		&#39;  Rows_sent: &#39;,</span><br><span class="line">		rows_sent,</span><br><span class="line">		&#39;  Rows_examined: &#39;,</span><br><span class="line">		rows_examined,</span><br><span class="line">		&#39;\n&#39;,</span><br><span class="line">		sql_text,</span><br><span class="line">		&#39;;&#39; </span><br><span class="line">) </span><br><span class="line">FROM</span><br><span class="line">	mysql.slow_log </span><br><span class="line">WHERE</span><br><span class="line">	start_time BETWEEN CURRENT_TIMESTAMP </span><br><span class="line">	AND date_add( CURRENT_TIMESTAMP, INTERVAL - 5 MINUTE );</span><br></pre></td></tr></table></figure>

<h2 id="慢查询-SQL"><a href="#慢查询-SQL" class="headerlink" title="慢查询 SQL"></a>慢查询 SQL</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 2020-10-02 19 : 17 : 23 | w_mini_user [ w_mini_user ] @[ 10.200.20.11 ] | 00 : 00 : 02 | 00 : 00 : 00 | 9 | 443117 | mini_user | 0 | 0 | 168387936 | SELECT</span><br><span class="line">id,</span><br><span class="line">club_id,</span><br><span class="line">reason,</span><br><span class="line">status,</span><br><span class="line">type,</span><br><span class="line">created_time,</span><br><span class="line">invite_id,</span><br><span class="line">falg_admin,</span><br><span class="line">file_id </span><br><span class="line">FROM</span><br><span class="line">	t_user_msg </span><br><span class="line">WHERE</span><br><span class="line">	1 </span><br><span class="line">	AND ( team_id IN ( 3212 ) AND app_id IS NOT NULL ) </span><br><span class="line">	OR ( invite_id &#x3D; 12395 OR applicant_id &#x3D; 12395 ) </span><br><span class="line">ORDER BY</span><br><span class="line">	created_time DESC </span><br><span class="line">	LIMIT 0,</span><br><span class="line">	10;</span><br><span class="line">| 1219921665 |</span><br></pre></td></tr></table></figure>

<p>从慢查询 slow_log 可以看到，执行时间 2s，扫描了 443117 行，只返回了 9 行，这是不合理的。</p>
<h2 id="SQL-分析"><a href="#SQL-分析" class="headerlink" title="SQL 分析"></a>SQL 分析</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#原始SQL，频繁访问的接口，目前执行时间2s。</span><br><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	team_id,</span><br><span class="line">	reason,</span><br><span class="line">	status,</span><br><span class="line">	type,</span><br><span class="line">	created_time,</span><br><span class="line">	invite_id,</span><br><span class="line">	falg_admin,</span><br><span class="line">	file_id </span><br><span class="line">FROM</span><br><span class="line">	t_user_msg </span><br><span class="line">WHERE</span><br><span class="line">	1 </span><br><span class="line">	AND ( team_id IN ( 3212 ) AND app_id IS NOT NULL ) </span><br><span class="line">	OR ( invite_id &#x3D; 12395 OR app_id &#x3D; 12395 ) </span><br><span class="line">ORDER BY</span><br><span class="line">	created_time DESC </span><br><span class="line">	LIMIT 0,</span><br><span class="line">	10;#执行计划</span><br><span class="line">+----+-------------+--------------+-------+---------------------------------+------------+---------+------+------+-------------+ | id | select_type | TABLE | type | possible_keys | KEY | key_len | ref | rows | Extra | +----+-------------+--------------+-------+---------------------------------+------------+---------+------+------+-------------+ | 1 | SIMPLE | t_user_msg | INDEX | invite_id,</span><br><span class="line">app_id,</span><br><span class="line">team_id | created_time | 5 | NULL | 10 | USING </span><br><span class="line">WHERE</span><br><span class="line">	| +----+-------------+--------------+-------+---------------------------------+------------+---------+------+------+-------------+ 1 ROW IN </span><br><span class="line">	SET ( 0.00 sec )</span><br></pre></td></tr></table></figure>

<p>从执行计划可以看到，表上有单列索引 <code>invite_id, app_id, team_id, created_time</code>，走的是 <code>create_time</code> 的索引，而且 <code>type = index</code> 索引全扫描，因为 <code>create_time</code> 没有出现在 WHERE 条件后，只出现在 ORDER BY 前，只能是 <code>type = index</code>，这也预示着表数据量越大该 SQL 越慢，我们期望是走三个单列索引 <code>invite_id, app_id, team_id</code>，然后<code>type = index_merge</code> 操作。</p>
<p>按照常规思路，对于 OR 条件拆分两部分，分别进行分析。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT id, …….FROM t_user_msg WHERE 1 AND **( team_id IN ( 3212 ) AND app_id IS NOT NULL )** </span><br><span class="line">ORDER BY</span><br><span class="line">	created_time DESC </span><br><span class="line">	LIMIT 0,</span><br><span class="line">	10;</span><br></pre></td></tr></table></figure>

<p>从执行计划看走的是 team_id 的索引，没有问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| id | select_type | TABLE | type | possible_keys | KEY | key_len | ref | rows | Extra | +----+-------------+--------------+------+----------------------+---------+---------+-------+------+-----------------------------+ | 1 | SIMPLE | t_user_msg | ref | app_id,</span><br><span class="line">team_id | team_id | 8 | const | 30 | USING </span><br><span class="line">WHERE</span><br><span class="line">	;</span><br><span class="line">USING filesort |</span><br></pre></td></tr></table></figure>

<p>再看另外一个 SQL 语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT id, …….FROM t_user_msg WHERE 1 AND **( invite_id &#x3D; 12395 OR app_id &#x3D; 12395 )** </span><br><span class="line">ORDER BY</span><br><span class="line">	created_time DESC </span><br><span class="line">	LIMIT 0,</span><br><span class="line">	10;</span><br></pre></td></tr></table></figure>

<p>从执行计划上看，分别走的是 <code>invite_id, app_id</code> 的单列索引，同时做了 index_merge 合并操作，也没有问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| id | select_type | TABLE | type | possible_keys | KEY | key_len | ref | rows | Extra | +----+-------------+--------------+-------------+-------------------------+-------------------------+---------+------+------+-------------------------------------------------------------------+ | 1 | SIMPLE | t_user_msg | index_merge | invite_id,</span><br><span class="line">app_id | invite_id,</span><br><span class="line">app_id | 9,</span><br><span class="line">9 | NULL | 2 | USING UNION</span><br><span class="line">( invite_id, app_id );</span><br><span class="line">USING </span><br><span class="line">WHERE</span><br><span class="line">	;</span><br><span class="line">USING filesort |</span><br></pre></td></tr></table></figure>

<p><strong><em>通过上面的分析，第一部分 SQL 走的执行计划走 team_id 没问题，第二部分 SQL 分别走 invite_id, app_id 索引并且 index_merge 也没问题，为什么两部分 SQL 进行 OR 关联之后走 create_time 的单列索引呢，不应该是三个单列索引的 index_merge 吗？</em></strong></p>
<p>index_merge 默认是在优化器选项是开启的，主要是将多个范围扫描的结果集合并成一个，可以通过变量查看。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql &gt; SELECT</span><br><span class="line">@@optimizer_switch;</span><br><span class="line">| index_merge &#x3D; ON,</span><br><span class="line">index_merge_union &#x3D; ON,</span><br><span class="line">index_merge_sort_union &#x3D; ON,</span><br><span class="line">index_merge_intersection &#x3D; ON,</span><br></pre></td></tr></table></figure>

<p>其他三个字段都传入的是具体的值，而且都走了相应的索引，只能怀疑 <code>app_id is not null</code> 这个条件影响了 CBO 对最终执行计划的选择，去掉这个条件来看执行计划，竟然走了三个单列索引并且 <code>type = index_merge</code>，那下面只需要搞定 <code>app_id is not null</code> 这个条件。</p>
<h2 id="SQL-改写"><a href="#SQL-改写" class="headerlink" title="SQL 改写"></a>SQL 改写</h2><p>通过上面的分析得知，条件 <code>app_id is not null</code> 影响了 CBO 的选择，下面进行改造。</p>
<h3 id="改写优化-1"><a href="#改写优化-1" class="headerlink" title="改写优化 1"></a>改写优化 1</h3><p>根据 SQL 开发规范改写，将 OR 改写成 UNION ALL 方式即可，最终的 SQL 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	…….</span><br><span class="line">FROM</span><br><span class="line">	(</span><br><span class="line">	SELECT</span><br><span class="line">		id,</span><br><span class="line">		…….</span><br><span class="line">	FROM</span><br><span class="line">		t_user_msg </span><br><span class="line">	WHERE</span><br><span class="line">		** 1 </span><br><span class="line">		AND ( club_id IN ( 5821 ) AND applicant_id IS NOT NULL )** ** UNION ALL</span><br><span class="line">		** SELECT</span><br><span class="line">		id,</span><br><span class="line">		…….</span><br><span class="line">	FROM</span><br><span class="line">		t_user_msg </span><br><span class="line">	WHERE</span><br><span class="line">		** 1 </span><br><span class="line">		AND invitee_id &#x3D; &#39;146737&#39; ** ** UNION ALL</span><br><span class="line">		** SELECT</span><br><span class="line">		id,</span><br><span class="line">		…….</span><br><span class="line">	FROM</span><br><span class="line">		t_user_msg </span><br><span class="line">	WHERE</span><br><span class="line">		** 1 </span><br><span class="line">		AND app_id &#x3D; &#39;146737&#39; ** </span><br><span class="line">	) AS a </span><br><span class="line">ORDER BY</span><br><span class="line">	created_time DESC </span><br><span class="line">	LIMIT 0,</span><br><span class="line">	10;</span><br></pre></td></tr></table></figure>

<p>一般情况下，Java 代码和 SQL 是分开的，SQL 是配置在 xml 文件中，根据业务需求，除了 team_id 是必填，其他两个都是可选的，所以这种改写虽然能提高 SQL 执行效率，但不适合这种业务场景。</p>
<h3 id="改写优化-2"><a href="#改写优化-2" class="headerlink" title="改写优化 2"></a>改写优化 2</h3><p><code>app_id is not null</code> 改写为 <code>IFNULL(app_id, 0) &gt; 0</code>，最终的 SQL 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	team_id,</span><br><span class="line">	reason,</span><br><span class="line">	status,</span><br><span class="line">	type,</span><br><span class="line">	created_time,</span><br><span class="line">	invite_id,</span><br><span class="line">	falg_admin,</span><br><span class="line">	file_id </span><br><span class="line">FROM</span><br><span class="line">	t_user_msg </span><br><span class="line">WHERE</span><br><span class="line">	1 </span><br><span class="line">	AND ( team_id IN ( 3212 ) AND ** IFNULL( app_id, 0 ) &gt; 0 )**) </span><br><span class="line">	OR ( invite_id &#x3D; 12395 OR app_id &#x3D; 12395 ) </span><br><span class="line">ORDER BY</span><br><span class="line">	created_time DESC </span><br><span class="line">	LIMIT 0,</span><br><span class="line">	10;</span><br></pre></td></tr></table></figure>

<h3 id="改写优化-3"><a href="#改写优化-3" class="headerlink" title="改写优化 3"></a>改写优化 3</h3><p>将字段 <code>app_id bigint(20) DEFAULT NULL</code>，变更为 <code>app_id bigint(20) NOT NULL DEFAULT 0</code>，同时更新将 <code>app_id is not null</code> 的时候全部更新成 0，就可以将条件 <code>app_id is not null</code> 转换为 <code>app_id &gt; 0</code>，最终的 SQL 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	id,</span><br><span class="line">	team_id,</span><br><span class="line">	reason,</span><br><span class="line">	status,</span><br><span class="line">	type,</span><br><span class="line">	created_at,</span><br><span class="line">	invite_id,</span><br><span class="line">	falg_admin,</span><br><span class="line">	file_id </span><br><span class="line">FROM</span><br><span class="line">	t_user_msg </span><br><span class="line">WHERE</span><br><span class="line">	1 </span><br><span class="line">	AND ( team_id IN ( 3212 ) AND ** app_id &gt; 0 )**) </span><br><span class="line">	OR ( invite_id &#x3D; 12395 OR app_id &#x3D; 12395 ) </span><br><span class="line">ORDER BY</span><br><span class="line">	created_time DESC </span><br><span class="line">	LIMIT 0,</span><br><span class="line">	10;</span><br></pre></td></tr></table></figure>

<p>从执行计划看，两种改写优化方式都走三个单列索引，执行时间从 2s 降低至 10ms，线上采用的是<strong>优化1</strong>的方式，如果一开始能遵循 MySQL 开发规范就会避免问题的产生。</p>
<blockquote>
<p>参考链接：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_35190492/article/details/109712166">大厂都是怎么进行SQL调优的？</a></li>
<li><a href="https://blog.csdn.net/ssdjdk/article/details/88912953">MySql中On和Where的区别</a></li>
<li><a href="https://blog.csdn.net/muxiaoshan/article/details/7617533?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">left join on 和where条件的放置</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>JS格式化日期时间</title>
    <url>/2020/11/19/JS%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="将-2020-10-10T08-30-00-000-0000-转换为-yyyy-MM-dd-HH-mm-ss"><a href="#将-2020-10-10T08-30-00-000-0000-转换为-yyyy-MM-dd-HH-mm-ss" class="headerlink" title="将 2020-10-10T08:30:00.000+0000 转换为 yyyy-MM-dd HH:mm:ss"></a>将 2020-10-10T08:30:00.000+0000 转换为 yyyy-MM-dd HH:mm:ss</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseTime</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> year = date.getFullYear();</span><br><span class="line">    <span class="keyword">let</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> day = date.getDate();</span><br><span class="line">    <span class="keyword">let</span> hour = date.getHours();</span><br><span class="line">    <span class="keyword">let</span> minute = date.getMinutes();</span><br><span class="line">    <span class="keyword">let</span> second = date.getSeconds();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> clock = year + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(month &lt; <span class="number">10</span>) clock += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    clock += month + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(day &lt; <span class="number">10</span>) clock += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    clock += day + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(hour &lt; <span class="number">10</span>) clock += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    clock += hour + <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(minute &lt; <span class="number">10</span>) clock += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    clock += minute + <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(second &lt; <span class="number">10</span>) clock += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    clock += second;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> clock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>格式化</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm2+Oh My Zsh</title>
    <url>/2020/11/23/iTerm2+Oh%20My%20Zsh/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装-iTerm2"><a href="#安装-iTerm2" class="headerlink" title="安装 iTerm2"></a>安装 iTerm2</h2><h3 id="切换-zsh"><a href="#切换-zsh" class="headerlink" title="切换 zsh"></a>切换 zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<h3 id="切换-bash"><a href="#切换-bash" class="headerlink" title="切换 bash"></a>切换 bash</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="查看-zsh-版本"><a href="#查看-zsh-版本" class="headerlink" title="查看 zsh 版本"></a>查看 zsh 版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zsh --version</span><br></pre></td></tr></table></figure>

<h2 id="安装-Oh-My-Zsh"><a href="#安装-Oh-My-Zsh" class="headerlink" title="安装 Oh My Zsh"></a>安装 Oh My Zsh</h2><p><strong>root 用户和普通用户要分别安装</strong></p>
<h3 id="Via-curl"><a href="#Via-curl" class="headerlink" title="Via curl"></a>Via curl</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Via-wget"><a href="#Via-wget" class="headerlink" title="Via wget"></a>Via wget</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>



<h2 id="iTerm2-设置主题"><a href="#iTerm2-设置主题" class="headerlink" title="iTerm2 设置主题"></a>iTerm2 设置主题</h2><h3 id="Solarized-Dark-theme"><a href="#Solarized-Dark-theme" class="headerlink" title="Solarized Dark theme"></a>Solarized Dark theme</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://ethanschoonover.com/solarized/</span><br></pre></td></tr></table></figure>

<h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/mbadolato/iTerm2-Color-Schemes/master/schemes/Atom.itermcolors</span><br></pre></td></tr></table></figure>

<h3 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a>其他主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://iterm2colorschemes.com/</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>更换主题</strong></p>
<p>打开 iTerm2</p>
<p>Preferences -&gt; Colors -&gt; Color Presets -&gt; Import</p>
</blockquote>
<h2 id="Oh-My-Zsh-设置主题"><a href="#Oh-My-Zsh-设置主题" class="headerlink" title="Oh My Zsh 设置主题"></a>Oh My Zsh 设置主题</h2><h3 id="agnoster"><a href="#agnoster" class="headerlink" title="agnoster"></a>agnoster</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 ZSH_THEME</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="agnoster-配置-Meslo-字体"><a href="#agnoster-配置-Meslo-字体" class="headerlink" title="agnoster 配置 Meslo 字体"></a>agnoster 配置 Meslo 字体</h3><p>下载地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>更换字体</strong></p>
<p>Preferences -&gt; Text -&gt; Font -&gt; Change Font</p>
</blockquote>
<h3 id="命令高亮插件"><a href="#命令高亮插件" class="headerlink" title="命令高亮插件"></a>命令高亮插件</h3><p>下载命令高亮插件到.zsh文件夹下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<p>激活插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line">plugins=(git zsh-syntax-highlighting)</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="自动建议填充"><a href="#自动建议填充" class="headerlink" title="自动建议填充"></a>自动建议填充</h3><p>下载插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>激活插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line">plugins=(git zsh-autosuggestions)</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="iTerm2-隐藏用户名和主机名"><a href="#iTerm2-隐藏用户名和主机名" class="headerlink" title="iTerm2 隐藏用户名和主机名"></a>iTerm2 隐藏用户名和主机名</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/themes/</span><br><span class="line">vim agnoster.zsh-theme</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到如下代码</span></span><br><span class="line"><span class="comment"># Context: user@hostname (who am I and where am I)</span></span><br><span class="line"><span class="function"><span class="title">prompt_context</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$USER</span>&quot;</span> != <span class="string">&quot;<span class="variable">$DEFAULT_USER</span>&quot;</span> || -n <span class="string">&quot;<span class="variable">$SSH_CLIENT</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="comment"># 修改如下代码，@Mac可以你自己定义</span></span><br><span class="line">   <span class="comment"># prompt_segment black default &quot;%(!.%&#123;%F&#123;yellow&#125;%&#125;.)$USER@%m&quot;</span></span><br><span class="line">   prompt_segment black default <span class="string">&quot;$&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Error evaluating expression</title>
    <url>/2020/11/26/Error%20evaluating%20expression/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h3><p>SpringBoot Console 中出现</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Error evaluating expression ‘sa<span class="variable">.dept</span> != <span class="literal">null</span>’. Cause: org<span class="variable">.apache</span><span class="variable">.ibatis</span><span class="variable">.ognl</span><span class="variable">.OgnlException</span>: source is <span class="literal">null</span> <span class="keyword">for</span> getProperty(<span class="literal">null</span>, “dept”)</span><br></pre></td></tr></table></figure>

<h3 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h3><p>异常实际是在 Mybatis 执行映射处理的时候发生的，属性“XXX”找不到调用自己的所有者对象(NULL)，所以抛出异常。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在对应的 <code>XXXMapper.xml</code> 中一步步判断字段（属性）所有者是否为空，<strong>从最初的字段所有者开始</strong>判断（先要判断 sa 不能为空），避免空指针，才能继续下面的判断。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sa!=null&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sa.dept != null&quot;</span>&gt;</span>and sa.dept = #&#123;sa.dept&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>解决SSH连接慢或自动卡死</title>
    <url>/2020/11/30/%E8%A7%A3%E5%86%B3SSH%E8%BF%9E%E6%8E%A5%E6%85%A2%E6%88%96%E8%87%AA%E5%8A%A8%E5%8D%A1%E6%AD%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>由于 Linux 默认开启 DNS 认证，60s 内没有任何数据，将会自动断开。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 末尾添加</span></span><br><span class="line">ServerAliveInterval 60</span><br><span class="line">ServerAliveCountMax 3</span><br><span class="line"></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">UseDNS no</span><br><span class="line">GSSAPIAuthentication no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 末尾添加</span></span><br><span class="line">ClientAliveInterval 50</span><br><span class="line">ClientAliveCountMax 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 sshd 服务</span></span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
</search>
